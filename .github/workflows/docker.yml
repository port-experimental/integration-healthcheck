name: Build and Push Docker Image

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch the last 2 commits to compare versions

      - name: Check if version changed
        id: version_check
        run: |
          CURRENT_VERSION=$(grep -E '^version = ".*"' "pyproject.toml" | cut -d'"' -f2)
          PREVIOUS_VERSION=$(git show HEAD~1:pyproject.toml 2>/dev/null | grep -E '^version = ".*"' | cut -d'"' -f2 || echo "")
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $CURRENT_VERSION"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.version_check.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.version_check.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from pyproject.toml
        if: steps.version_check.outputs.should_build == 'true'
        id: version
        run: |
          VERSION=$(grep -E '^version = ".*"' "pyproject.toml" | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        if: steps.version_check.outputs.should_build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.version }}
            type=sha,format=short

      - name: Build and push Docker image
        if: steps.version_check.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_CONTEXT=.
            INTEGRATION_VERSION=${{ github.sha }}
          platforms: linux/amd64,linux/arm64 